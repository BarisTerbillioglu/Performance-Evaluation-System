// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerformanceEvaluation.Infrastructure.Data;

#nullable disable

namespace PerformanceEvaluation.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807142621_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ScoreID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentDescription")
                        .IsUnique();

                    b.HasIndex("ScoreID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Criteria", b =>
                {
                    b.Property<int>("CriteriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriteriaID"));

                    b.Property<string>("BaseDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriteriaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CriteriaID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.CriteriaCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("CriteriaCategories");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentName = "Money Transfer Department",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Evaluation", b =>
                {
                    b.Property<int>("EvaluationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationID"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluationPeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EvaluatorID")
                        .HasColumnType("int");

                    b.Property<string>("GeneralComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("EvaluationID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("EvaluatorID");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.EvaluationAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AssignmentID");

                    b.HasIndex("EvaluatorID");

                    b.HasIndex("EmployeeID", "EvaluatorID")
                        .IsUnique();

                    b.ToTable("EvaluationAssignments");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.EvaluationScore", b =>
                {
                    b.Property<int>("ScoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CriteriaID")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ScoreID");

                    b.HasIndex("EvaluationID");

                    b.HasIndex("CriteriaID", "EvaluationID")
                        .IsUnique();

                    b.ToTable("EvaluationScores");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.JobRole", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("JobRoles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Description = "System Administrator",
                            IsActive = true,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Description = "Can evaluate employees",
                            IsActive = true,
                            RoleName = "Evaluator"
                        },
                        new
                        {
                            RoleID = 3,
                            Description = "Regular employee",
                            IsActive = true,
                            RoleName = "Employee"
                        },
                        new
                        {
                            RoleID = 4,
                            Description = "Business Analyst",
                            IsActive = true,
                            RoleName = "Business Analyst"
                        },
                        new
                        {
                            RoleID = 5,
                            Description = "Software Developer",
                            IsActive = true,
                            RoleName = "Developer"
                        },
                        new
                        {
                            RoleID = 6,
                            Description = "Quality Assurance Specialist",
                            IsActive = true,
                            RoleName = "QA Specialist"
                        });
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.RoleCriteriaDescription", b =>
                {
                    b.Property<int>("DescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DescriptionID"));

                    b.Property<int>("CriteriaID")
                        .HasColumnType("int");

                    b.Property<string>("Example")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("DescriptionID");

                    b.HasIndex("RoleID");

                    b.HasIndex("CriteriaID", "RoleID");

                    b.ToTable("RoleCriteriaDescriptions");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentID = 1,
                            Email = "admin@vakifbank.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Admin",
                            PasswordHash = "$2a$11$k8NqsIWNZNc04q3hz4K22.2AIxMe731uW7rDdTbvf8.HnWPlLfFAC"
                        });
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleID"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID", "RoleID")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            AssignedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleID = 1,
                            UserID = 1
                        },
                        new
                        {
                            UserRoleID = 2,
                            AssignedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleID = 5,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Comment", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.EvaluationScore", "EvaluationScore")
                        .WithMany("Comments")
                        .HasForeignKey("ScoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationScore");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Criteria", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.CriteriaCategory", "CriteriaCategory")
                        .WithMany("Criteria")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CriteriaCategory");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Evaluation", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.User", "Employee")
                        .WithMany("EmployeeEvaluations")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Core.Entities.User", "Evaluator")
                        .WithMany("EvaluatorEvaluations")
                        .HasForeignKey("EvaluatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.EvaluationAssignment", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.User", "Employee")
                        .WithMany("EmployeeAssignments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Core.Entities.User", "Evaluator")
                        .WithMany("EvaluatorAssignments")
                        .HasForeignKey("EvaluatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.EvaluationScore", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.Criteria", "Criteria")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("CriteriaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Core.Entities.Evaluation", "Evaluation")
                        .WithMany("EvaluationScores")
                        .HasForeignKey("EvaluationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.RoleCriteriaDescription", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.Criteria", "Criteria")
                        .WithMany("RoleCriteriaDescriptions")
                        .HasForeignKey("CriteriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Core.Entities.JobRole", "JobRole")
                        .WithMany("RoleCriteriaDescriptions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("JobRole");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.User", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.UserRole", b =>
                {
                    b.HasOne("PerformanceEvaluation.Core.Entities.JobRole", "JobRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Criteria", b =>
                {
                    b.Navigation("EvaluationScores");

                    b.Navigation("RoleCriteriaDescriptions");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.CriteriaCategory", b =>
                {
                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.Evaluation", b =>
                {
                    b.Navigation("EvaluationScores");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.EvaluationScore", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.JobRole", b =>
                {
                    b.Navigation("RoleCriteriaDescriptions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PerformanceEvaluation.Core.Entities.User", b =>
                {
                    b.Navigation("EmployeeAssignments");

                    b.Navigation("EmployeeEvaluations");

                    b.Navigation("EvaluatorAssignments");

                    b.Navigation("EvaluatorEvaluations");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
