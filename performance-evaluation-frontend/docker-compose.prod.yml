version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: performance-evaluation-frontend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-https://api.performance-evaluation.com}
      - VITE_APP_NAME=${VITE_APP_NAME:-Performance Evaluation System}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
      - VITE_ENVIRONMENT=production
    volumes:
      - ./logs:/var/log/nginx
      - ./uploads:/usr/share/nginx/html/uploads
    networks:
      - performance-evaluation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - api

  # API Backend (if running separately)
  api:
    image: performance-evaluation-api:latest
    container_name: performance-evaluation-api
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - JWT__Secret=${JWT_SECRET}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE}
    volumes:
      - ./api-logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - performance-evaluation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database (PostgreSQL)
  database:
    image: postgres:15-alpine
    container_name: performance-evaluation-db
    environment:
      - POSTGRES_DB=${DB_NAME:-performance_evaluation}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your-secure-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - performance-evaluation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-performance_evaluation}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: performance-evaluation-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - performance-evaluation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional - for SSL termination)
  nginx-proxy:
    image: nginx:alpine
    container_name: performance-evaluation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    networks:
      - performance-evaluation-network
    restart: unless-stopped
    depends_on:
      - frontend
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: performance-evaluation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - performance-evaluation-network
    restart: unless-stopped

  # Grafana (for monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: performance-evaluation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - performance-evaluation-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  performance-evaluation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
